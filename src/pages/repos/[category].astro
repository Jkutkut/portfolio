---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { str2slug } from "../../utils";
import Project from "../../components/Project.astro";
import type { RepoData } from "../../types";

export const highlightSlug = str2slug("highlights");

export const getStaticPaths = (async () => {
  const staticPaths = [
    { params: { category: highlightSlug } },
  ];
  const categories = await getCollection('categories');
  if (!categories) {
    return staticPaths;
  }
  staticPaths.push(
    ...categories.map(category => ({
      params: { category: str2slug(category.id) },
    }))
  );
  return staticPaths;
}) satisfies GetStaticPaths;

const categories = await getCollection('categories');
const highlights = await getCollection('highlights');
const { category: categoryName } = Astro.params;

const category = categoryName === highlightSlug ?
  { data: { title: "Highlights", repos: highlights.map(repo => repo.data as RepoData) } } :
  categories.find(cat => str2slug(cat.id) === categoryName.toLowerCase());

if (!category) {
  throw new Error(`Category "${categoryName}" not found.`);
}
---

<Layout>
  <section class="projects">
    <h1>{category.data.title}</h1>
    {category.data.repos.map(repo => (
      <Project repo={repo as RepoData} />
    )) || <p>No repositories found in this category.</p>}
  </section>
</Layout>
