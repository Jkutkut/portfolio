---
import { getCollection } from "astro:content";
import { TITLE } from "../constants";
import { LinkTarget, type Link } from "../types";
import LinkBtn from "./LinkBtn.astro";
import { str2slug } from "../utils";
import ThemeToggle from "./ThemeToggle.astro";

const routes: Link[] = Astro.props.routes || [];
const categories = await getCollection("categories");
---

<header class="header">
  <div class="menu">
    <div class="logo">
      <LinkBtn link={{ text: TITLE, url: "/" }} target={LinkTarget.Self} tabIndex={1} />
    </div>
    <nav>
      <ul>
        <li>
          <LinkBtn link={{ text: "Projects", url: "/repos" }} target={LinkTarget.Self} tabIndex={2} />
        </li>
        {
          routes.map((route, idx) => (
            <li>
              <LinkBtn link={route} target={LinkTarget.Self} tabIndex={categories.length + 3 + idx} />
            </li>
          ))
        }
      </ul>
    </nav>
    <ThemeToggle />
  </div>
  <div class="submenu">
    <ul>
      {categories.map((category, idx) => (
        <li>
          <LinkBtn
            link={{ text: category.data.title, url: `/repos/${str2slug(category.id)}` }}
            target={LinkTarget.Self}
            classes={["full-w submenu-link"]}
            tabIndex={3 + idx}
          >
            <span class="title">
              {category.data.title}
            </span>
            {category.data.description && (
              <span class="link-description">{category.data.description}</span>
            )}
          </LinkBtn>
        </li>
      ))}
    </ul>
  </div>
</header>

<div class="header-html-space"></div>

<style>
  header {
    position: fixed;
    top: 0;
    width: 100%;

    border-bottom: 2px solid var(--border);
    background: var(--bg);
    z-index: 1000;
  }
  .header > .menu {
    display: flex;
    flex-direction: row;
    align-items: center;
  }
  .header-html-space, .header > .menu {
    height: var(--header-height);
  }
  .header > .logo {
    margin: 1rem;
  }
  .logo {
    padding: 1rem;
  }
  nav {
    width: 100%;
    height: 100%;
    gap: 1rem;
    display: flex;
  }
  nav > ul {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    padding: 0;
    gap: 1rem;
  }
  li {
    list-style: none;
  }
  .submenu {
    display: none;
    padding: 1rem;
    padding-top: 0;
    border-top: 2px solid var(--border);

    ul {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      padding: 0;
    }
  }
  .submenu.active {
    display: block;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const header = document.querySelector("header")!;
    const submenu = document.querySelector(".submenu")!;

    const projectsBtn = header.querySelector("nav ul li a[href='/repos']");
    const onFocus = () => {
      submenu.classList.add("active");
    };
    const onUnfocus = () => {
      submenu.classList.remove("active");
    };
    const onTabUnfocus = (event: any) => {
      const relatedTarget = event.relatedTarget;
      console.log("Tab out from submenu", relatedTarget);
      if (!submenu.contains(relatedTarget as Node)) {
        submenu.classList.remove("active");
      }
    };
    projectsBtn?.addEventListener("mouseenter", onFocus);
    header?.addEventListener("mouseleave", onUnfocus);
    projectsBtn?.addEventListener("focus", onFocus);
    submenu.addEventListener("focusout", onTabUnfocus);
    projectsBtn?.addEventListener("focusout", onTabUnfocus);
  });
</script>
