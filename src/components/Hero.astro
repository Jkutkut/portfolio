---
import { Image } from "astro:assets";
import { LinkTarget, type Link, type SocialLink } from "../types";
import LinkBtn from "./LinkBtn.astro";

type LinkHero = Link & {
  linkType: "primary" | "secondary";
};
interface Props {
  title: string;
  description: string;
  links: LinkHero[];
  socials: SocialLink[];
}

const { title, description, links, socials }: Props = Astro.props;
---

<section class="hero fade-up">
  <div class="hero-content">
    <h1>{title}</h1>
    <p>{description}</p>
    <div class="hero-buttons">
      {
        links.map((link: LinkHero) => (
          <LinkBtn link={link}
            classes={[`btn`, `btn-${link.linkType}`]}
            target={LinkTarget.Self}
          />
        ))
      }
    </div>
    <div class="socials">
      {
        socials.map((social) => (
          <LinkBtn link={social}>
            <Image src={social.icon} alt={`icon for ${social.text}`} width={24} height={24} />
          </LinkBtn>
        ))
      }
    </div>
  </div>
</section>

<style>
  .hero {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: calc(100vh - var(--header-height));
  }
  @media screen and (min-width: 500px) {
    .hero-content {
      width: 500px;
    }
  }
  .hero-content {
    text-align: center;
  }
  .hero-buttons {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-top: 1.5rem;
  }
  .btn {
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    text-decoration: none;
    font-weight: bold;
  }
  .btn.btn-primary {
    color: white;
    background: #007bff;
  }
  .btn.btn-secondary {
    color: white;
    background: #6c757d;
  }
  .socials {
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: 1rem;
    margin-top: 2rem;
  }
  .fade-up {
  opacity: 0;
  transform: translateY(60px);
  transition: opacity 2s ease-out, transform 2s ease-out;
}

.fade-up.visible {
  opacity: 1;
  transform: translateY(0);
}
</style>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const elements = document.querySelectorAll('.fade-up');

    const observer = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
          observer.unobserve(entry.target); 
        }
      });
    }, { threshold: 0.1 });

    elements.forEach(el => observer.observe(el));
  });
</script>